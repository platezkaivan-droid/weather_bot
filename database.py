import sqlite3
import logging
import os
from datetime import datetime

logger = logging.getLogger(__name__)

DB_PATH = 'users.db'

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10.0)
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cur.fetchall()]
        
        if not columns:
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            logger.info("üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É users...")
            cur.execute('''
            CREATE TABLE users (
                user_id INTEGER PRIMARY KEY,
                city TEXT,
                username TEXT,
                first_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')
        else:
            # –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            if 'username' not in columns:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è—é —Å—Ç–æ–ª–±–µ—Ü username...")
                cur.execute('ALTER TABLE users ADD COLUMN username TEXT')
                
            if 'first_name' not in columns:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è—é —Å—Ç–æ–ª–±–µ—Ü first_name...")
                cur.execute('ALTER TABLE users ADD COLUMN first_name TEXT')
                
            if 'created_at' not in columns:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è—é —Å—Ç–æ–ª–±–µ—Ü created_at...")
                cur.execute('ALTER TABLE users ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
                
            if 'updated_at' not in columns:
                logger.info("‚ûï –î–æ–±–∞–≤–ª—è—é —Å—Ç–æ–ª–±–µ—Ü updated_at...")
                cur.execute('ALTER TABLE users ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
            
            # –£–±–∏—Ä–∞–µ–º NOT NULL —Å city –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if 'city' in columns:
                logger.info("üîß –û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                cur.execute('''
                CREATE TABLE users_new (
                    user_id INTEGER PRIMARY KEY,
                    city TEXT,
                    username TEXT,
                    first_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                ''')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                cur.execute('''
                INSERT INTO users_new (user_id, city, username, first_name, created_at, updated_at)
                SELECT 
                    user_id, 
                    city,
                    CASE WHEN 'username' IN (SELECT name FROM pragma_table_info('users')) THEN username ELSE NULL END,
                    CASE WHEN 'first_name' IN (SELECT name FROM pragma_table_info('users')) THEN first_name ELSE NULL END,
                    CASE WHEN 'created_at' IN (SELECT name FROM pragma_table_info('users')) THEN created_at ELSE CURRENT_TIMESTAMP END,
                    CASE WHEN 'updated_at' IN (SELECT name FROM pragma_table_info('users')) THEN updated_at ELSE CURRENT_TIMESTAMP END
                FROM users
                ''')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                cur.execute('DROP TABLE users')
                cur.execute('ALTER TABLE users_new RENAME TO users')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cur.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON users(user_id)')
        
        conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cur.execute("PRAGMA table_info(users)")
        columns_info = cur.fetchall()
        logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in columns_info:
            logger.info(f"   {col[1]} ({col[2]})")
        
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

def set_user_city(user_id, city, username=None, first_name=None):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10.0)
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cur.fetchall()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cur.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        exists = cur.fetchone()
        
        if exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'username' in columns and 'first_name' in columns and 'updated_at' in columns:
                # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                cur.execute('''
                    UPDATE users 
                    SET city = ?, username = ?, first_name = ?, updated_at = CURRENT_TIMESTAMP 
                    WHERE user_id = ?
                ''', (city, username, first_name, user_id))
            else:
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                cur.execute('''
                    UPDATE users 
                    SET city = ?
                    WHERE user_id = ?
                ''', (city, user_id))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'username' in columns and 'first_name' in columns:
                # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                cur.execute('''
                    INSERT INTO users (user_id, city, username, first_name) 
                    VALUES (?, ?, ?, ?)
                ''', (user_id, city, username, first_name))
            else:
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                cur.execute('''
                    INSERT INTO users (user_id, city) 
                    VALUES (?, ?)
                ''', (user_id, city))
        
        conn.commit()
        logger.info(f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        try:
            conn = sqlite3.connect(DB_PATH, timeout=10.0)
            cur = conn.cursor()
            cur.execute('INSERT OR REPLACE INTO users (user_id, city) VALUES (?, ?)', (user_id, city))
            conn.commit()
            logger.info(f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)")
        except sqlite3.Error as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞: {e2}")
            raise
        finally:
            if conn:
                conn.close()
    finally:
        if conn:
            conn.close()

def get_user_city(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10.0)
        cur = conn.cursor()
        
        cur.execute('SELECT city FROM users WHERE user_id = ?', (user_id,))
        result = cur.fetchone()
        
        if result:
            logger.debug(f"–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result[0]}")
            return result[0]
        else:
            logger.debug(f"–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        return None
    finally:
        if conn:
            conn.close()

def get_user_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10.0)
        cur = conn.cursor()
        
        cur.execute('SELECT COUNT(*) FROM users')
        total_users = cur.fetchone()[0]
        
        cur.execute('SELECT COUNT(DISTINCT city) FROM users WHERE city IS NOT NULL')
        unique_cities = cur.fetchone()[0]
        
        return {
            'total_users': total_users,
            'unique_cities': unique_cities
        }
        
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {'total_users': 0, 'unique_cities': 0}
    finally:
        if conn:
            conn.close()

def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if os.path.exists(DB_PATH):
            backup_name = f"users_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            import shutil
            shutil.copy2(DB_PATH, backup_name)
            
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
            return backup_name
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None