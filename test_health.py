#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è health endpoints
"""

import asyncio
import aiohttp
import sys

async def test_endpoint(url, endpoint):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω endpoint"""
    full_url = f"{url}{endpoint}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(full_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                status = response.status
                text = await response.text()
                
                if status == 200:
                    print(f"‚úÖ {endpoint} - OK ({status})")
                    print(f"   Response: {text[:100]}...")
                else:
                    print(f"‚ùå {endpoint} - FAILED ({status})")
                    print(f"   Response: {text[:100]}...")
                    
                return status == 200
                
    except Exception as e:
        print(f"üí• {endpoint} - ERROR: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_health.py <URL>")
        print("–ü—Ä–∏–º–µ—Ä: python test_health.py https://your-app.onrender.com")
        sys.exit(1)
    
    base_url = sys.argv[1].rstrip('/')
    
    endpoints = [
        "/",
        "/health", 
        "/healthz",
        "/ready",
        "/alive"
    ]
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints –¥–ª—è {base_url}")
    print("=" * 50)
    
    results = []
    for endpoint in endpoints:
        result = await test_endpoint(base_url, endpoint)
        results.append(result)
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("=" * 50)
    
    success_count = sum(results)
    total_count = len(results)
    
    for i, endpoint in enumerate(endpoints):
        status = "‚úÖ OK" if results[i] else "‚ùå FAILED"
        print(f"{endpoint:<10} - {status}")
    
    print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç!")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())