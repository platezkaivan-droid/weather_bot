import asyncio
import logging
import aiohttp
import sys
import traceback
from datetime import datetime, timezone, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter, TelegramBadRequest
from aiogram.types import BotCommand, BotCommandScopeDefault, MenuButtonCommands, CallbackQuery

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import config
import database as db
import keyboards as kb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
db.init_db()

# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–∞
class SetCity(StatesGroup):
    waiting_for_city_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        await message.answer(
            "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n\n"
            "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É\n"
            "üîπ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "üîπ –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é\n\n"
            "ÔøΩ –ü—Äe–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å \"–ú–æ—Å–∫–≤–∞\" –∏–ª–∏ \"Moscow\"",
            reply_markup=kb.get_inline_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    try:
        await message.answer(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üîπ /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "üîπ /weather - –ø–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
            "üîπ /setcity - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "üîπ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "ÔøΩ /h–∫elp - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    try:
        stats = db.get_user_stats()
        user_city = db.get_user_city(message.from_user.id)
        
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üèôÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {stats['unique_cities']}\n"
            f"üåç –í–∞—à –≥–æ—Ä–æ–¥: {user_city or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"ü§ñ –í–µ—Ä—Å–∏—è: 2.0\n"
            f"‚ö° –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    try:
        await message.answer(
            "ü§ñ –û –±–æ—Ç–µ:\n\n"
            "üå§Ô∏è Weather Bot v2.0\n"
            "–ù–∞–¥–µ–∂–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n\n"
            "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Skrizzzy4\n"
            "üîó GitHub: github.com/platezkaivan-droid\n\n"
            "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ about: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("setcity"))
async def cmd_setcity(message: types.Message, state: FSMContext):
    try:
        await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        await state.set_state(SetCity.waiting_for_city_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ setcity: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(SetCity.waiting_for_city_name)
async def city_chosen(message: types.Message, state: FSMContext):
    try:
        city_name = message.text.strip()
        if not city_name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥, –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–æ–≥–æ–¥—É
        weather_info = await get_weather(city_name)
        if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in weather_info.lower() or "–æ—à–∏–±–∫–∞" in weather_info.lower():
            await message.answer(f"{weather_info}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑:")
            return
            
        try:
            db.set_user_city(
                message.from_user.id, 
                city_name,
                message.from_user.username,
                message.from_user.first_name
            )
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –≤ –ë–î: {db_error}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            try:
                db.set_user_city(message.from_user.id, city_name)
            except Exception as db_error2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {db_error2}")
                await message.answer(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n{weather_info}")
                await state.clear()
                return
        await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {city_name.capitalize()}\n\n{weather_info}")
        await state.clear()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {city_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def get_weather(city: str):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={config.WEATHER_API_KEY}&units=metric&lang=ru"
        
        timeout = aiohttp.ClientTimeout(total=10)  # —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    description = data['weather'][0]['description']
                    temp = data['main']['temp']
                    feels_like = data['main']['feels_like']
                    wind_speed = data['wind']['speed']
                    humidity = data['main']['humidity']
                    pressure = data['main']['pressure']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≥–æ—Ä–æ–¥–∞
                    timezone_offset = data.get('timezone', 0)  # —Å–º–µ—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç UTC
                    logger.info(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è {city}: {timezone_offset} —Å–µ–∫—É–Ω–¥ –æ—Ç UTC")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
                    utc_now = datetime.now(timezone.utc)
                    local_time = utc_now + timedelta(seconds=timezone_offset)
                    local_time_str = local_time.strftime('%H:%M:%S')
                    local_date_str = local_time.strftime('%d.%m.%Y')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
                    sunrise_str = "‚Äî"
                    sunset_str = "‚Äî"
                    
                    try:
                        if 'sys' in data and 'sunrise' in data['sys'] and 'sunset' in data['sys']:
                            sunrise_utc = datetime.fromtimestamp(data['sys']['sunrise'], tz=timezone.utc)
                            sunset_utc = datetime.fromtimestamp(data['sys']['sunset'], tz=timezone.utc)
                            
                            sunrise_local = sunrise_utc + timedelta(seconds=timezone_offset)
                            sunset_local = sunset_utc + timedelta(seconds=timezone_offset)
                            
                            sunrise_str = sunrise_local.strftime('%H:%M')
                            sunset_str = sunset_local.strftime('%H:%M')
                    except (KeyError, ValueError, OSError) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞: {e}")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
                    weather_emoji = get_weather_emoji(data['weather'][0]['main'])
                    
                    return (
                        f"{weather_emoji} –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()}:\n\n"
                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                        f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}\n\n"
                        f"üìÖ –î–∞—Ç–∞: {local_date_str}\n"
                        f"üïê –ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {local_time_str}\n"
                        f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise_str}\n"
                        f"üåá –ó–∞–∫–∞—Ç: {sunset_str}\n"
                        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{timezone_offset//3600:+d}"
                    )
                elif response.status == 404:
                    return "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞."
                elif response.status == 401:
                    logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeatherMap")
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
        return "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_weather_emoji(weather_main: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–≥–æ–¥—ã"""
    weather_emojis = {
        'Clear': '‚òÄÔ∏è',
        'Clouds': '‚òÅÔ∏è',
        'Rain': 'üåßÔ∏è',
        'Drizzle': 'üå¶Ô∏è',
        'Thunderstorm': '‚õàÔ∏è',
        'Snow': '‚ùÑÔ∏è',
        'Mist': 'üå´Ô∏è',
        'Fog': 'üå´Ô∏è',
        'Haze': 'üå´Ô∏è'
    }
    return weather_emojis.get(weather_main, 'üå§Ô∏è')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="weather", description="üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ"),
        BotCommand(command="setcity", description="üèôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"),
        BotCommand(command="about", description="‚ÑπÔ∏è –û –±–æ—Ç–µ"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.delete_my_commands(BotCommandScopeDefault())
        logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("üìù –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        logger.info("üéõÔ∏è –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        current_commands = await bot.get_my_commands(BotCommandScopeDefault())
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(current_commands)}")
        for cmd in current_commands:
            logger.info(f"   /{cmd.command} - {cmd.description}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

@dp.message(Command("weather"))
async def cmd_weather(message: types.Message):
    try:
        city = db.get_user_city(message.from_user.id)
        if city:
            await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É...")
            weather_info = await get_weather(city)
            await message.answer(weather_info)
        else:
            await message.answer(
                "üèôÔ∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥, "
                "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞!"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ weather: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text)
async def text_weather_handler(message: types.Message):
    try:
        city_name = message.text.strip()
        if not city_name:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤)
        if len(city_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        await message.answer("üîÑ –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É...")
        weather_info = await get_weather(city_name)
        await message.answer(weather_info)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_send_message(message: types.Message, text: str):
    try:
        await message.answer(text)
    except TelegramRetryAfter as e:
        logger.warning(f"Rate limit, –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.retry_after)
        await message.answer(text)
    except TelegramBadRequest as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "weather")
async def callback_weather(callback: CallbackQuery):
    try:
        await callback.answer()
        city = db.get_user_city(callback.from_user.id)
        if city:
            await callback.message.answer("üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É...")
            weather_info = await get_weather(city)
            await callback.message.answer(weather_info)
        else:
            await callback.message.answer(
                "üèôÔ∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥:",
                reply_markup=kb.get_inline_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback weather: {e}")

@dp.callback_query(F.data == "setcity")
async def callback_setcity(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await callback.message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        await state.set_state(SetCity.waiting_for_city_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback setcity: {e}")

@dp.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    try:
        await callback.answer()
        stats = db.get_user_stats()
        user_city = db.get_user_city(callback.from_user.id)
        
        await callback.message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üèôÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {stats['unique_cities']}\n"
            f"üåç –í–∞—à –≥–æ—Ä–æ–¥: {user_city or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"ü§ñ –í–µ—Ä—Å–∏—è: 2.0\n"
            f"‚ö° –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:",
            reply_markup=kb.get_inline_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback stats: {e}")

@dp.callback_query(F.data == "about")
async def callback_about(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.answer(
            "ü§ñ –û –±–æ—Ç–µ:\n\n"
            "üå§Ô∏è Weather Bot v2.0\n"
            "–ù–∞–¥–µ–∂–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n\n"
            "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Skrizzzy4\n"
            "üîó GitHub: github.com/platezkaivan-droid\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=kb.get_weather_examples_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback about: {e}")

@dp.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    try:
        await callback.answer()
        await callback.message.answer(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üöÄ /start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "üå§Ô∏è /weather - –ø–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
            "üèôÔ∏è /setcity - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
            "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "‚ÑπÔ∏è /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üí° –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞!\n\n"
            "üéØ –ü—Ä–∏–º–µ—Ä—ã:",
            reply_markup=kb.get_weather_examples_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback help: {e}")

@dp.callback_query(F.data.startswith("city_"))
async def callback_city_weather(callback: CallbackQuery):
    try:
        await callback.answer()
        city_name = callback.data.replace("city_", "")
        await callback.message.answer(f"üîÑ –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}...")
        weather_info = await get_weather(city_name)
        await callback.message.answer(
            weather_info + "\n\nüí° –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            reply_markup=kb.get_inline_menu_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {city_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback city weather: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
@dp.message(Command("updatemenu"))
async def cmd_update_menu(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
        if message.from_user.username != "Skrizzzy4":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
            
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é –∫–æ–º–∞–Ω–¥...")
        success = await set_bot_commands()
        
        if success:
            await message.answer("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ updatemenu: {e}")
        await safe_send_message(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(event, data):
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {event.exception}")
    logger.error(f"Traceback: {traceback.format_exc()}")
    return True

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
async def main():
    max_retries = 5
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
            bot_info = await bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é
            await set_bot_commands()
            
            # –ó–∞–ø—É—Å–∫ polling
            await dp.start_polling(bot, skip_updates=True)
            
        except TelegramNetworkError as e:
            retry_count += 1
            wait_time = min(60 * retry_count, 300)  # –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
            logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            
        except Exception as e:
            retry_count += 1
            wait_time = min(30 * retry_count, 180)  # –º–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            if retry_count < max_retries:
                logger.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logger.error("üíÄ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                break
    
    logger.error("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# Graceful shutdown
async def shutdown():
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    await bot.session.close()
    logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        asyncio.run(shutdown())
    except Exception as e:
        logger.error(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")