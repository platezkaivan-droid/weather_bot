#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞ Render Web Service
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞), —Ç–∞–∫ –∏ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
"""

import asyncio
import logging
import sys
import traceback
from aiohttp import web
from aiohttp.web_request import Request
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.types import Update

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
import config
import database as db
from bot import dp, bot, set_bot_commands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

async def webhook_handler(request: Request, bot: Bot) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        update = Update.model_validate(await request.json(), context={"bot": bot})
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook handler: {e}")
        return web.Response(status=500)

async def health_check(request: Request) -> web.Response:
    """Health check endpoint –¥–ª—è Render"""
    return web.json_response({
        "status": "ok", 
        "bot": "weather_bot",
        "version": "2.0",
        "timestamp": asyncio.get_event_loop().time()
    })

async def healthz_check(request: Request) -> web.Response:
    """Healthz endpoint –¥–ª—è Kubernetes/Render"""
    return web.json_response({"status": "healthy"})

async def root_handler(request: Request) -> web.Response:
    """–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    return web.json_response({
        "name": "Weather Bot",
        "version": "2.0",
        "status": "running",
        "endpoints": {
            "health": "/health",
            "healthz": "/healthz", 
            "ready": "/ready",
            "webhook": config.WEBHOOK_PATH
        }
    })

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            webhook_url = f"{config.WEBHOOK_URL}{config.WEBHOOK_PATH}"
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {webhook_url}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            await bot.set_webhook(
                url=webhook_url,
                allowed_updates=dp.resolve_used_update_types(),
                drop_pending_updates=True,
                secret_token=None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            )
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
            await asyncio.sleep(2)
            webhook_info = await bot.get_webhook_info()
            logger.info(f"üì° Webhook info:")
            logger.info(f"   URL: {webhook_info.url}")
            logger.info(f"   Pending updates: {webhook_info.pending_update_count}")
            logger.info(f"   Last error: {webhook_info.last_error_message or 'None'}")
            
            if webhook_info.url == webhook_url:
                logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è {webhook_url}, –ø–æ–ª—É—á–µ–Ω {webhook_info.url}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 2
                logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(wait_time)
            else:
                logger.error("üíÄ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                return False
    
    return False

@web.middleware
async def logging_middleware(request: Request, handler):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = asyncio.get_event_loop().time()
    
    try:
        response = await handler(request)
        process_time = asyncio.get_event_loop().time() - start_time
        
        logger.info(f"üì° {request.method} {request.path} - {response.status} - {process_time:.3f}s")
        return response
        
    except Exception as e:
        process_time = asyncio.get_event_loop().time() - start_time
        logger.error(f"‚ùå {request.method} {request.path} - ERROR: {e} - {process_time:.3f}s")
        raise

async def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook —Ä–µ–∂–∏–º–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å middleware
    app = web.Application(middlewares=[logging_middleware])
    
    # Health check endpoints
    app.router.add_get("/", root_handler)
    app.router.add_get("/health", health_check)
    app.router.add_get("/healthz", healthz_check)
    app.router.add_get("/ready", health_check)
    app.router.add_get("/alive", health_check)
    
    # Webhook endpoint
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=config.WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    return app

async def run_webhook():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook (–¥–ª—è Render)"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db.init_db()
        await set_bot_commands()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        if not await setup_webhook():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = await create_app()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, "0.0.0.0", config.PORT)
        await site.start()
        
        logger.info(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {config.PORT}")
        logger.info(f"üåê Health endpoints:")
        logger.info(f"   - http://0.0.0.0:{config.PORT}/health")
        logger.info(f"   - http://0.0.0.0:{config.PORT}/healthz")
        logger.info(f"   - http://0.0.0.0:{config.PORT}/ready")
        logger.info(f"üîó Webhook: {config.WEBHOOK_URL}{config.WEBHOOK_PATH}")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            while True:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ webhook
                if hasattr(config, 'WEBHOOK_URL') and config.WEBHOOK_URL:
                    try:
                        webhook_info = await bot.get_webhook_info()
                        if webhook_info.last_error_message:
                            logger.warning(f"‚ö†Ô∏è Webhook error: {webhook_info.last_error_message}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")
                        
        except asyncio.CancelledError:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            await runner.cleanup()
            raise
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ webhook —Ä–µ–∂–∏–º–µ: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise

async def run_polling():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db.init_db()
        await set_bot_commands()
        
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ polling —Ä–µ–∂–∏–º–µ: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Weather Bot...")
        logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
        logger.info(f"üåê –ü–æ—Ä—Ç: {config.PORT}")
        logger.info(f"üîó Webhook URL: {config.WEBHOOK_URL or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        logger.info(f"üì° –†–µ–∂–∏–º webhook: {config.USE_WEBHOOK}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.BOT_TOKEN:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        if not config.WEATHER_API_KEY:
            raise ValueError("‚ùå WEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} (ID: {bot_info.id})")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if config.USE_WEBHOOK:
            if not config.WEBHOOK_URL:
                logger.warning("‚ö†Ô∏è USE_WEBHOOK=true, –Ω–æ WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling.")
                await run_polling()
            else:
                logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ WEBHOOK (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)")
                await run_webhook()
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ POLLING (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
            await run_polling()
            
    except Exception as e:
        logger.error(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å webhook –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            await bot.delete_webhook()
            logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
        except:
            pass
            
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)